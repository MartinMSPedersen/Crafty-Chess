# Makefile version 16.0
# Crafty v16.x makefile for Windows NT Intel
# Written by Jason Deines (jdeines@mindspring.com) April 1998
# Version modified by Gregor Overney (gregor_overney@hp.com) Nov 1998
#
# This makefile is designed to be used from the command line with 
# Microsoft's nmake.  Either rename this # file to "Makefile" or name it 
# explicitly when invoking nmake:
#     nmake -f Makefile.nt
#
# The makefile is set up for Microsoft Visual C++ 6.0 Intel.
#
# The default target produces a file called "wcrafty1600.exe".
#
# Since SMP is not yet supported/tested for module egtb.cpp, egtb.cpp
# will be compiled separately.
#
# The fast calling convention /Gr should only be used for VC++ 5.0. It
# does not work in VC++ 6.0.

# Build target is defined here.
TARGET   = NT_i386

# Command-line compiler and linker invocation commands:
CC       = cl
LD       = link

# Base compiler flags needed for build:
BFLAGS = /D_CONSOLE /DWIN32

# Compiler flags:
# /O2    optimize for speed
# /Oa    assume no aliasing
# /Gr    fastcall calling convention (does not work correctly with VC++ 6.0)
# /G5    target Pentium (but will run on all x86 architectures)
# /G6    target Pentium Pro (but will run on all x86 architectures)
#
# For debugging use these flags instead:
# CFLAGS  = /Od /Zi
# LDFLAGS  = /DEBUG /DEBUGTYPE:CV
#

#CFLAGS   = /O2 /G6 /Oa
#CFLAGS   = /O2 /G6 /Oa /Gr
CFLAGS   = /O2 /G5 /Oa
#CFLAGS   = /Od /Zi

# Linker flags, normally not needed except for debug builds:
LDFLAGS  =
#LDFLAGS  = /DEBUG /DEBUGTYPE:CV
 
# See the default crafty makefile for a description of the options below.
# With VC++, defines like COMPACT_ATTACKS, etc, makes the code slower, so 
# those # options are disabled by default.  FAST is normally not defined 
# so that hash statistics are reported -- for the fastest possible 
# executable, define FAST below.

COPTS    =
OPTMT    =
#COPTS    = /DFAST
#COPTS    = /DCOMPACT_ATTACKS /DUSE_SPLIT_SHIFTS /DUSE_ATTACK_FUNCTIONS \
#           /DUSE_ASSEMBLY_A /DUSE_ASSEMBLY_B /DTABLEBASES

# For an SMP build use/add the following build options.
# NT_INTEREX is defined if you want to use the built-in InterlockedExchange()
# function for thread resource locking, instead of the inline asm routine.
# /MT is a compiler flag needed for multithreaded builds.

#COPTS    = /DSMP /DCPUS=4 /DNT_INTEREX
#COPTS    = /DSMP /DCPUS=2
#OPTMT    = /MT

# If you are using any external assembler routines, put the name of the 
# object code file(s) here.  Any such files will need to be generated 
# separately -- there is no assembler step defined in the makefile.

asmobjs  =
#asmobjs  = x86.obj

ALLOPTS  = $(OPTMT) $(COPTS) /D$(TARGET)

cobjs    = analyze.obj annotate.obj attacks.obj bench.obj book.obj boolean.obj \
	   data.obj draw.obj drawn.obj edit.obj enprise.obj epd.obj epdglue.obj \
	   evaluate.obj evtest.obj hash.obj history.obj init.obj input.obj interupt.obj \
	   iterate.obj learn.obj make.obj main.obj movgen.obj next.obj \
	   nexte.obj nextr.obj option.obj output.obj phase.obj ponder.obj \
	   preeval.obj quiesce.obj repeat.obj resign.obj root.obj search.obj \
	   searchmp.obj searchr.obj setboard.obj swap.obj test.obj \
	   thread.obj time.obj unmake.obj utility.obj valid.obj validate.obj probe.obj

allobjs  = $(cobjs) $(asmobjs) egtb.obj

includes = chess.h data.h epd.h epddefs.h epdglue.h evaluate.h

wcrafty1600  : $(allobjs)
		$(LD) $(LDFLAGS) $(allobjs) /out:wcrafty1600.exe

$(cobjs) : $(includes)

.c.obj   :
	   $(CC) $(BFLAGS) $(CFLAGS) $(ALLOPTS) /c $*.c

egtb.obj : egtb.cpp
	   $(CC) /c /O $(OPTMT) /D$(TARGET) egtb.cpp

clean:
	   del -q $(cobjs)
	   del -q egtb.obj
	   del -q $(xcobjs)
	   del -q log.*
	   del -q game.**
	   del -q *.bak
